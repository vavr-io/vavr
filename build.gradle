/*
 * Some Gradle tasks we use:
 *
 * - Build: `./gradlew check`
 *   -> test reports: ./build/reports/tests/test/index.html
 *   -> coverage reports: ./build/reports/jacoco/test/html/index.html
 *   -> javadoc: `./build/docs/javadoc`
 *
 * - Release: `./gradlew release --info`
 *
 * - Release:
 *   -> checking the generated artifacts: `./gradlew publishAllPublicationsToTestRepo` then look into `build/repo`
 *   -> Releasing: `./gradlew release --info`
 *
 * In order to perform a release you need to:
 *   - Add the following properties to ~/.gradle/gradle.properties
 *     ossrhUsername=<username>
 *     ossrhPassword=<password>
 *   - or pass the credentials as command line parameters
 *     ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository -DossrhUsername=<my-username> -DossrhPassword=<my-password>
 *
 * And for signing the artifacts:
 *   - Get public key ID `gpg --list-keys --keyid-format SHORT`
 *   - Export key `gpg --keyring secring.gpg --export-secret-keys > ~/.gnupg/secring.gpg`
 *   - Add the following properties to ~/.gradle/gradle.properties
 *          signing.keyId=0ABCDEF
 *          signing.password=password
 *          signing.secretKeyRingFile=/absolute/path/to/.gnupg/secring.gpg
 */
plugins {

    // library
    id 'java-library'
    id 'jacoco'

    // publishing
    id 'maven-publish'
    id 'signing'
    id 'net.researchgate.release' version '3.0.2'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
}

ext.ammoniteScalaVersion = '3.5'
ext.ammoniteVersion = '3.0.0'
ext.ammoniteVersionQualifier = '2-6342755f'
ext.assertjVersion = '3.26.3'
ext.junitVersion = '5.11.3'

// JAVA_VERSION used for CI build matrix, may be provided as env variable
def javaVersion = Integer.parseInt(System.getenv('JAVA_VERSION') ?: '8')

repositories {
    mavenCentral()
}

// --                       --
// -- JAVA BUILD & CODE GEN --
// --                       --

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()

    maxHeapSize = '1G'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(javaVersion))
    }
    withSourcesJar()
    withJavadocJar()
}

sourceSets.main.java.srcDirs += ['src-gen/main/java']
sourceSets.test.java.srcDirs += ['src-gen/test/java']

tasks.register('generateSources') {
    doLast {
        delete 'src-gen'
        def ammoniteDir = file("generator/bin")
        if (!ammoniteDir.exists()) {
            ammoniteDir.mkdirs()
        }
        def ammoniteJar = new File(ammoniteDir, "amm-${ammoniteScalaVersion}-${ammoniteVersion}.jar")
        if (!ammoniteJar.exists()) {
            def ammoniteAssetName = [ammoniteScalaVersion, ammoniteVersion, ammoniteVersionQualifier]
                .findAll { it != null && !it.isEmpty() }
                .join('-')
            def ammoniteReleaseUrl = "https://github.com/lihaoyi/Ammonite/releases/download/${ammoniteVersion}/${ammoniteAssetName}"
            ant.get(src: ammoniteReleaseUrl, dest: ammoniteJar)
        }
        javaexec {
            classpath = project.files(ammoniteJar)
            args = ["generator/Generator.sc"]
        }
    }
}

compileJava.dependsOn 'generateSources'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs = [ '-Werror', '-Xlint:all', '-Xlint:-deprecation' ]
}

javadoc {options.encoding = "UTF-8"} // error: unmappable character for encoding ASCII

tasks.named('jacocoTestReport') {
    reports {
        xml.required = true
    }
}

tasks.named('check') {
    dependsOn jacocoTestReport
    dependsOn javadoc
}

tasks.named('jar') {
    from('.') {
        include 'LICENSE'
    }

    manifest {
        attributes('Automatic-Module-Name': 'io.vavr')
    }
}

tasks.register('testSourcesJar', Jar) {
    from sourceSets.test.allSource
    archiveClassifier = 'test-sources'
}

// --                        --
// -- PUBLISHING & RELEASING --
// --                        --

// What we want to publish
publishing {
    repositories {
        maven {
            // A test repository which can be used to
            // verify what is going to be uploaded by
            // running ./gradlew publishAllPublicationsToTestRepo
            name = "testRepo"
            url = "${buildDir}/repo"
        }
    }

    publications {
        maven(MavenPublication) {
            from components.java
            // vavr also publishes a test sources jar
            artifact tasks.named('testSourcesJar')
            pom {
                name = project.name
                description = "Vavr is an object-functional library for Java 8+"
                url = 'https://www.vavr.io'
                inceptionYear = '2014'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'https://mit-license.org'
                    }
                }
                developers {
                    developer {
                        name = 'Daniel Dietrich'
                        email = 'cafebab3@gmail.com'
                        organization = 'Vavr'
                        organizationUrl = 'https://github.com/vavr-io'
                    }
                    developer {
                        name = 'Grzegorz Piwowarek'
                        email = 'gpiwowarek@gmail.com'
                        organization = 'Vavr'
                        organizationUrl = 'https://github.com/vavr-io'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/vavr-io/vavr.git'
                    developerConnection = 'scm:git:https://github.com/vavr-io/vavr.git'
                    url = 'https://github.com/vavr-io/vavr/tree/master'
                }
            }
        }
    }
}

// Signing configuration mandatory for Maven Central
signing {
    required { !version.endsWith("-SNAPSHOT") }
    publishing.publications.configureEach {
        sign(it)
    }
}

// Configure the publishing repositories for Maven Central
nexusPublishing {
    repositories {
        sonatype {
            username.set(providers.systemProperty("ossrhUsername").orElse("").forUseAtConfigurationTime())
            password.set(providers.systemProperty("ossrhPassword").orElse("").forUseAtConfigurationTime())
        }
    }
}

// Configure the "release" plugin
tasks.named('afterReleaseBuild') {
    dependsOn "publishToSonatype", "closeAndReleaseSonatypeStagingRepository"
}

release {
    buildTasks = ['build']
    tagTemplate = '$name-$version'
    git {
        requireBranch.set('')
        pushToRemote.set('origin')
    }
}

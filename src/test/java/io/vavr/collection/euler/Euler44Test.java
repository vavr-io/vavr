/* ____  ______________  ________________________  __________
 * \   \/   /      \   \/   /   __/   /      \   \/   /      \
 *  \______/___/\___\______/___/_____/___/\___\______/___/\___\
 *
 * Copyright 2023 Vavr, https://vavr.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.vavr.collection.euler;

import io.vavr.API;
import io.vavr.concurrent.Future;
import org.junit.Test;

import java.util.concurrent.TimeUnit;

import static org.assertj.core.api.Assertions.assertThat;

public class Euler44Test {

    /**
     * <strong>Problem 44 Pentagon numbers</strong>
     * <p>
     * Pentagonal numbers are generated by the formula, P<sub><i>n</i></sub>=<i>n</i>(3<i>n</i>−1)/2.
     * The first ten pentagonal numbers are: </p>
     * <p>
     *     1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
     * </p>
     * <p>
     * It can be seen that P<sub>4</sub> + P<sub>7</sub> = 22 + 70 = 92 = P<sub>8</sub>.
     * However, their difference, 70 − 22 = 48, is not pentagonal.
     * </p>
     * <p>
     * Find the pair of pentagonal numbers, P<sub><i>j</i></sub> and P<sub><i>k</i></sub>,
     * for which their sum and difference are pentagonal and D = |P<sub><i>k</i></sub> - P<sub><i>j</i></sub>|
     * is minimised; what is the value of D?
     * <p>
     * See also <a href="https://projecteuler.net/problem=44">projecteuler.net
     * problem 44</a>.
     */
    @Test
    public void shouldSolveProblem44() {
        final Future<Long> computation = API.Future(this::minimalPentagonalDiff)
                .await(2, TimeUnit.SECONDS);
        assertThat(computation.getOrElse(-1L)).isEqualTo(5482660);
    }

    private Long minimalPentagonalDiff() {
        return Utils.pentagonal().flatMap(sumPentagonal ->
                Utils.pentagonal().takeWhile(pentagonal -> sumPentagonal.compareTo(pentagonal) > 0)
                        .filter(pj -> Utils.isPentagonal(sumPentagonal - pj) &&
                                Utils.isPentagonal(sumPentagonal - 2 * pj))
                        .map(pj -> sumPentagonal - 2 * pj)).head();
    }
}
